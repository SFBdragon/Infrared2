
pub fn knights_attack_mask(knights: u64) -> u64 {
    if knights == 0 { return 0; }

    let mut msk = 0;
    msk |= (knights & 0x0000FEFEFEFEFEFE) << 0o17; // uul
    msk |= (knights & 0x00007F7F7F7F7F7F) << 0o21; // uur
    msk |= (knights & 0x00FCFCFCFCFCFCFC) << 0o6 ; // ull
    msk |= (knights & 0x003F3F3F3F3F3F3F) << 0o12; // urr
    msk |= (knights & 0xFEFEFEFEFEFE0000) >> 0o21; // ddl
    msk |= (knights & 0x7F7F7F7F7F7F0000) >> 0o17; // ddr
    msk |= (knights & 0xFCFCFCFCFCFCFC00) >> 0o12; // dll
    msk |= (knights & 0x3F3F3F3F3F3F3F00) >> 0o6 ; // drr
    msk
}


//let mut dat_file = std::fs::File::create(std::path::Path::new("src/board/rook.dat")).unwrap();
{
let mut total = 0u64;
for i in 0..64 {
    let rank: usize = i % 8;
    let file: usize = i / 8;

    let row = 0x7e;
    let col = 0x0001010101010100;
    
    let mut msk: u64 = 0;
    msk |= row << file * 8;
    msk |= col << rank;
    msk &= !(1 << i);

    print!("{:#x}, ", total);
    total += 1 << msk.count_ones();

    for i in 0..(1 << msk.count_ones()) {
        let all = unsafe { std::arch::x86_64::_pdep_u64(i as u64, msk) };
        let mut mov_msk = 0u64;

        for j in 1..=rank {
            mov_msk |= 1 << (rank - j + file * 8);
            if 1 << (rank - j + file * 8) & all != 0 {
                break;
            }
        }
        for j in 1..=(7-rank) {
            mov_msk |= 1 << (rank + j + file * 8);
            if 1 << (rank + j + file * 8) & all != 0 {
                break;
            }
        }
        for j in 1..=file {
            mov_msk |= 1 << (rank + (file - j) * 8);
            if 1 << (rank + (file - j) * 8) & all != 0 {
                break;
            }
        }
        for j in 1..=(7-file) {
            mov_msk |= 1 << (rank + (file + j) * 8);
            if 1 << (rank + (file + j) * 8) & all != 0 {
                break;
            }
        }

        println!("{:x}  ", mov_msk);
        
        //dat_file.write(&mov_msk.to_le_bytes()).unwrap();
    }

    /* let row = 0x7e;
    let col = 0x0001010101010100;

    let mut msk: u64 = 0;
    msk |= row << file * 8;
    msk |= col << rank;

    print!("{:#x}, ", msk & !(1 << i)); */
}


/* let mut bishop_dat_file = std::fs::File::create(std::path::Path::new("src/board/bishop.dat")).unwrap();

let mut total = 0u64;
for i in 0..64 {
let rank: usize = i % 8;
let file: usize = i / 8;

let mut msk = 0u64;
for j in 1..std::cmp::min(rank, file) {
msk |= 1 << (rank - j + (file - j) * 8);
}
for j in 1..std::cmp::min(7-rank, 7-file) {
msk |= 1 << (rank + j + (file + j) * 8);
}
for j in 1..std::cmp::min(7-rank, file) {
msk |= 1 << (rank + j + (file - j) * 8);
}
for j in 1..std::cmp::min(rank, 7-file) {
msk |= 1 << (rank - j + (file + j) * 8);
}

print!("{:#x}, ", total);
total += 1 << msk.count_ones();
for i in 0..(1 << msk.count_ones()) {
let all = unsafe { std::arch::x86_64::_pdep_u64(i as u64, msk) };
let mut mov_msk = 0u64;

for j in 1..=std::cmp::min(rank, file) {
    mov_msk |= 1 << (rank - j + (file - j) * 8);
    if 1 << (rank - j + (file - j) * 8) & all != 0 {
        break;
    }
}
for j in 1..=std::cmp::min(7-rank, 7-file) {
    mov_msk |= 1 << (rank + j + (file + j) * 8);
    if 1 << (rank + j + (file + j) * 8) & all != 0 {
        break;
    }
}
for j in 1..=std::cmp::min(7-rank, file) {
    mov_msk |= 1 << (rank + j + (file - j) * 8);
    if 1 << (rank + j + (file - j) * 8) & all != 0 {
        break;
    }
}
for j in 1..=std::cmp::min(rank, 7-file) {
    mov_msk |= 1 << (rank - j + (file + j) * 8);
    if 1 << (rank - j + (file + j) * 8) & all != 0 {
        break;
    }
}

bishop_dat_file.write(&mov_msk.to_le_bytes()).unwrap();

/* let row = 0x7e;
let col = 0x0001010101010100;

let mut msk: u64 = 0;
msk |= row << file * 8;
msk |= col << rank;

print!("{:#x}, ", msk & !(1 << i)); */
} */



    /* pub fn unmake(&mut self, Move { from_sq, to_sq, piece }: Move, unmake: &Unmake) {
        let from = 1u64 << from_sq;
        let to = 1u64 << to_sq;

        self.move_count -= (self.colour + 1) as u16 >> 1;
        self.flip();

        // update actv
        self.actv = self.actv & !to | from;
        // handle pawn promotions
        if unmake.pawn_move && piece != Piece::Pawn {
            self.pawns |= from;
            match piece {
                Piece::Queen =>  self.queens &= !to,
                Piece::Rook =>   self.rooks &= !to,
                Piece::Bishop => self.bishops &= !to,
                Piece::Knight => self.knights &= !to,
                _ => panic!(),
            }
        }

        // update moved piece
        match piece {
            Piece::Pawn =>   self.pawns = self.pawns & !to | from,
            Piece::Knight => self.knights = self.knights & !to | from,
            Piece::Bishop => self.bishops = self.bishops & !to | from,
            Piece::Queen =>  self.queens = self.queens & !to | from,
            Piece::Rook =>   self.rooks = self.rooks & !to | from,
            Piece::King => {
                self.actv_king_sq = from_sq;
                if from == to >> 2 { // kingside castle!
                    self.rooks = self.rooks & !0x20 | 0x80;
                    self.actv = self.actv & !0x20 | 0x80;
                } else if from == to << 2 { // queenside castle!
                    self.rooks = self.rooks & !0x8 | 0x1;
                    self.actv = self.actv & !0x8 | 0x1;
                }
            }
        }

        // handle capture
        if let Some(cap) = unmake.capture {
            match cap {
                Capture::Normal(piece) => {
                    self.idle |= to;
                    match piece {
                        Piece::Pawn => self.pawns |= to,
                        Piece::Knight => self.knights |= to,
                        Piece::Bishop => self.bishops |= to,
                        Piece::Rook => self.rooks |= to,
                        Piece::Queen => self.queens |= to,
                        Piece::King => unreachable!(),
                    }
                },
                Capture::EnPassant => {
                    let cap = to >> 8;
                    self.pawns |= cap;
                    self.idle |= cap;
                },
            }
        }

        self.all = self.actv | self.idle;

        self.actv_castle_flags = unmake.actv_castle_flags;
        self.idle_castle_flags = unmake.idle_castle_flags;
        self.fifty_move_clock = unmake.fifty_move_clock;
        self.hash = unmake.hash;
        self.en_passant = unmake.en_passant;
    } */


pub struct PureCoordMove {
    pub from: u8,
    pub to: u8,
    pub promotion: Option<Piece>,
}

impl PureCoordMove {
    /// Convert from pure coordinate notation.
    /// ### Panics:
    /// Panics when `coord` byte length is not 4 or 5.
    pub fn from_pure_coord(coord: &str) -> Option<Self> {
        let from = alg_pos_to_sq(&coord[0..2])?;
        let to = alg_pos_to_sq(&coord[2..4])?;
        
        match coord.len() {
            4 => Some(Self { from, to, promotion: None }),
            5 => {
                let promo = match coord.as_bytes()[5] {
                    b'q' => Piece::Queen,
                    b'n' => Piece::Knight,
                    b'r' => Piece::Rook,
                    b'b' => Piece::Bishop,
                    _ => return None,
                };

                Some(Self { from, to, promotion: Some(promo) })
            },
            _ => panic!("Invalid coord argument length."),
        }
    }

    /// Convert to pure coordinate notation.
    pub fn to_pure_coord(&self) -> String {
        match self.promotion {
            Some(promo) => {
                let mut alg_pos = String::with_capacity(4);
                alg_pos.push_str(sq_to_alg_pos(self.from).as_str());
                alg_pos.push_str(sq_to_alg_pos(self.to).as_str());
                alg_pos.push(match promo {
                    Piece::Knight => 'n',
                    Piece::Bishop => 'b',
                    Piece::Rook => 'r',
                    Piece::Queen => 'q',
                    _ => panic!("Invalid promotion piece."),
                });
                alg_pos
            },
            None => {
                let mut alg_pos = String::with_capacity(4);
                alg_pos.push_str(sq_to_alg_pos(self.from).as_str());
                alg_pos.push_str(sq_to_alg_pos(self.to).as_str());
                alg_pos
            },
        }
    }
}