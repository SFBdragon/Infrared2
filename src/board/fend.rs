//! Piece move/defend masks and generation.

#[inline]
pub fn pawn_fend_actv(sq: u8) -> u64 {
    PAWNS_FEND_MASKS_ACTV[sq as usize]
}
#[inline]
pub fn pawn_fend_idle(sq: u8) -> u64 {
    PAWNS_FEND_MASKS_IDLE[sq as usize]
}
#[inline]
pub(crate) fn pawn_fend_idle_wall(sq: u8, _all: u64) -> u64 {
    PAWNS_FEND_MASKS_IDLE[sq as usize]
}
#[inline]
pub fn knight_fend(sq: u8) -> u64 {
    KNIGHT_FEND_MASKS[sq as usize]
}
#[inline]
pub(crate) fn knight_fend_wall(sq: u8, _all: u64) -> u64 {
    KNIGHT_FEND_MASKS[sq as usize]
}
#[inline]
pub fn rook_fend(sq: u8, all: u64) -> u64 {
    let (offset, mask, magic, shift) = ROOK_MAGIC_DATA[sq as usize];
    let index = (all & mask).wrapping_mul(magic) as usize >> shift;
    ROOK_FEND_MASKS[offset + index]
}
#[inline]
pub fn bishop_fend(sq: u8, all: u64) -> u64 {
    let (offset, mask, magic, shift) = BISHOP_MAGIC_DATA[sq as usize];
    let index = (all & mask).wrapping_mul(magic) as usize >> shift;
    BISHOP_FEND_MASKS[offset + index]
}
#[inline]
pub fn queen_fend(sq: u8, all: u64) -> u64 {
    rook_fend(sq, all) | bishop_fend(sq, all)
}
#[inline]
pub fn king_fend(sq: u8) -> u64 {
    KING_FEND_MASKS[sq as usize]
}


#[inline]
pub fn pawns_fend_actv(pawns: u64) -> u64 {
    let mut fend = 0;
    fend |= (pawns & !0x0101010101010101) << 0o7 ; // forward-left
    fend |= (pawns & !0x8080808080808080) << 0o11; // forward-right
    fend
}
#[inline]
pub fn pawns_fend_idle(pawns: u64) -> u64 {
    let mut fend = 0;
    fend |= (pawns & !0x0101010101010101) >> 0o11; // backward-left
    fend |= (pawns & !0x8080808080808080) >> 0o7 ; // backward-right
    fend
}


pub static KING_FEND_MASKS: [u64; 64] = [
    0x302, 0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040, 0x30203, 0x70507, 
    0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0, 0xc040c0, 0x3020300, 0x7050700, 
    0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 0x302030000, 
    0x705070000, 0xe0a0e0000, 0x1c141c0000, 0x3828380000, 0x7050700000, 0xe0a0e00000, 
    0xc040c00000, 0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000, 
    0x382838000000, 0x705070000000, 0xe0a0e0000000, 0xc040c0000000, 0x3020300000000, 
    0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 
    0x70507000000000, 0xe0a0e000000000, 0xc040c000000000, 0x302030000000000, 
    0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 
    0x7050700000000000, 0xe0a0e00000000000, 0xc040c00000000000, 0x203000000000000, 
    0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 
    0x5070000000000000, 0xa0e0000000000000, 0x40c0000000000000, 
];

pub static PAWNS_FEND_MASKS_ACTV: [u64; 64] = [0x200, 0x500, 0xa00, 0x1400, 
    0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 
    0x280000, 0x500000, 0xa00000, 0x400000, 0x2000000, 0x5000000, 0xa000000, 
    0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000, 0x200000000, 
    0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 
    0xa000000000, 0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 
    0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 
    0x400000000000, 0x2000000000000, 0x5000000000000, 0xa000000000000, 
    0x14000000000000, 0x28000000000000, 0x50000000000000, 0xa0000000000000, 
    0x40000000000000, 0x200000000000000, 0x500000000000000, 0xa00000000000000, 
    0x1400000000000000, 0x2800000000000000, 0x5000000000000000, 0xa000000000000000, 
    0x4000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
];
pub static PAWNS_FEND_MASKS_IDLE: [u64; 64] = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40, 0x200, 0x500, 0xa00, 
    0x1400, 0x2800, 0x5000, 0xa000, 0x4000, 0x20000, 0x50000, 0xa0000, 0x140000, 
    0x280000, 0x500000, 0xa00000, 0x400000, 0x2000000, 0x5000000, 0xa000000, 
    0x14000000, 0x28000000, 0x50000000, 0xa0000000, 0x40000000, 0x200000000, 
    0x500000000, 0xa00000000, 0x1400000000, 0x2800000000, 0x5000000000, 
    0xa000000000, 0x4000000000, 0x20000000000, 0x50000000000, 0xa0000000000, 
    0x140000000000, 0x280000000000, 0x500000000000, 0xa00000000000, 0x400000000000, 
    0x2000000000000, 0x5000000000000, 0xa000000000000, 0x14000000000000, 
    0x28000000000000, 0x50000000000000, 0xa0000000000000, 0x40000000000000,
];

pub static KNIGHT_FEND_MASKS: [u64; 64] = [0x20400, 0x50800, 0xa1100, 0x142200, 
    0x284400, 0x508800, 0xa01000, 0x402000, 0x2040004, 0x5080008, 0xa110011, 
    0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020, 0x204000402, 
    0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 
    0xa0100010a0, 0x4020002040, 0x20400040200, 0x50800080500, 0xa1100110a00, 
    0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 
    0x402000204000, 0x2040004020000, 0x5080008050000, 0xa1100110a0000, 
    0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 
    0x40200020400000, 0x204000402000000, 0x508000805000000, 0xa1100110a000000, 
    0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 
    0x4020002040000000, 0x400040200000000, 0x800080500000000, 0x1100110a00000000, 
    0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 
    0x2000204000000000, 0x4020000000000, 0x8050000000000, 0x110a0000000000, 
    0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000, 
];


pub static ROOK_FEND_MASKS: [u64; 0x19000] = include!("rook.dat");
pub static ROOK_MAGIC_DATA: [(usize, u64, u64, u32); 64] = [
    (0x0,0x101010101017e,0xf980001188204000,0x34),
    (0x1000,0x202020202027c,0xd780200010400084,0x35),
    (0x1800,0x404040404047a,0xdd002000400a1100,0x35),
    (0x2000,0x8080808080876,0xdb000830010004a0,0x35),
    (0x2800,0x1010101010106e,0xaf00110004420800,0x35),
    (0x3000,0x2020202020205e,0xde00041042001108,0x35),
    (0x3800,0x4040404040403e,0x3f8041000a000480,0x35),
    (0x4000,0x8080808080807e,0xfa80006700004080,0x34),
    (0x5000,0x1010101017e00,0xcf9380028c400021,0x35),
    (0x5800,0x2020202027c00,0xaf014000d0002001,0x36),
    (0x5c00,0x4040404047a00,0xbb16002600804010,0x36),
    (0x6000,0x8080808087600,0x9f09808008001000,0x36),
    (0x6400,0x10101010106e00,0x7e80800800040180,0x36),
    (0x6800,0x20202020205e00,0xf902008408100a00,0x36),
    (0x6c00,0x40404040403e00,0xeb01000c02001100,0x36),
    (0x7000,0x80808080807e00,0x3f0e000400408201,0x35),
    (0x7800,0x10101017e0100,0xcf0020800a400082,0x35),
    (0x8000,0x20202027c0200,0xf690014000600240,0x36),
    (0x8400,0x40404047a0400,0x7ba5808010006004,0x36),
    (0x8800,0x8080808760800,0xed12020040212810,0x36),
    (0x8c00,0x101010106e1000,0xdd0101001801101c,0x36),
    (0x9000,0x202020205e2000,0xf915010008020400,0x36),
    (0x9400,0x404040403e4000,0xbd40840010c80d02,0x36),
    (0x9800,0x808080807e8000,0xed5a360004028065,0x35),
    (0xa000,0x101017e010100,0x5f00400a80002c82,0x35),
    (0xa800,0x202027c020200,0xde802001401000c0,0x36),
    (0xac00,0x404047a040400,0xdb02405100200104,0x36),
    (0xb000,0x8080876080800,0xf60c104200200a00,0x36),
    (0xb400,0x1010106e101000,0x7d04040080800800,0x36),
    (0xb800,0x2020205e202000,0x7d04420080800400,0x36),
    (0xbc00,0x4040403e404000,0x7740210400029850,0x36),
    (0xc000,0x8080807e808000,0x5f50040200008045,0x35),
    (0xc800,0x1017e01010100,0xf604304000800080,0x35),
    (0xd000,0x2027c02020200,0x9f44400080802000,0x36),
    (0xd400,0x4047a04040400,0xf500600081801000,0x36),
    (0xd800,0x8087608080800,0xbe41006009001000,0x36),
    (0xdc00,0x10106e10101000,0xed61800400804800,0x36),
    (0xe000,0x20205e20202000,0xbd82000802009044,0x36),
    (0xe400,0x40403e40404000,0x7700802300800200,0x36),
    (0xe800,0x80807e80808000,0x7e80012082001044,0x35),
    (0xf000,0x17e0101010100,0xff01004080010020,0x35),
    (0xf800,0x27c0202020200,0xfaa010002742c000,0x36),
    (0xfc00,0x47a0404040400,0x9f00200100410010,0x36),
    (0x10000,0x8760808080800,0xb70240220012000a,0x36),
    (0x10400,0x106e1010101000,0x7d02040008008080,0x36),
    (0x10800,0x205e2020202000,0xf506000400028080,0x36),
    (0x10c00,0x403e4040404000,0x7e2048018a040010,0x36),
    (0x11000,0x807e8080808000,0x7e007080440a0011,0x35),
    (0x11800,0x7e010101010100,0xeb0180004000a080,0x35),
    (0x12000,0x7c020202020200,0xcf6040008c200080,0x36),
    (0x12400,0x7a040404040400,0xed40801600604200,0x36),
    (0x12800,0x76080808080800,0xed00610010000900,0x36),
    (0x12c00,0x6e101010101000,0xfe80080004008080,0x36),
    (0x13000,0x5e202020202000,0xdd01840002008080,0x36),
    (0x13400,0x3e404040404000,0xfd08010210080400,0x36),
    (0x13800,0x7e808080808000,0x7782044110842200,0x35),
    (0x14000,0x7e01010101010100,0xd708210110408003,0x34),
    (0x15000,0x7c02020202020200,0xdd88194000210081,0x35),
    (0x15800,0x7a04040404040400,0xbe00a00018c01101,0x35),
    (0x16000,0x7608080808080800,0xf502001004182042,0x35),
    (0x16800,0x6e10101010101000,0xbd0200a008501402,0x35),
    (0x17000,0x5e20202020202000,0xf511000644008801,0x35),
    (0x17800,0x3e40404040404000,0x7b0010080a011494,0x35),
    (0x18000,0x7e80808080808000,0x7d48868904002042,0x34),
];

pub static BISHOP_FEND_MASKS: [u64; 0x1480] = include!("bishop.dat");
pub static BISHOP_MAGIC_DATA: [(usize, u64, u64, u32); 64] = [
    (0x0,0x40201008040200,0xee20081101006208,0x3a),
    (0x40,0x402010080400,0xfa0210210a008000,0x3b),
    (0x60,0x4020100a00,0xdb08820402242010,0x3b),
    (0x80,0x40221400,0xcf04040083006000,0x3b),
    (0xa0,0x2442800,0x3f04042201222208,0x3b),
    (0xc0,0x204085000,0xde1282a020000000,0x3b),
    (0xe0,0x20408102000,0xdd81040220040040,0x3b),
    (0x100,0x2040810204000,0xf500406801282083,0x3a),
    (0x140,0x20100804020000,0xbd40142004041087,0x3b),
    (0x160,0x40201008040000,0xfa08821002008114,0x3b),
    (0x180,0x4020100a0000,0xaf430800850e0000,0x3b),
    (0x1a0,0x4022140000,0xee20080841002000,0x3b),
    (0x1c0,0x244280000,0x7d20020210014400,0x3b),
    (0x1e0,0x20408500000,0xfe0c420812082a00,0x3b),
    (0x200,0x2040810200000,0xee020a0814840482,0x3b),
    (0x220,0x4081020400000,0xf500902501482002,0x3b),
    (0x240,0x10080402000200,0xdb43122408020400,0x3b),
    (0x260,0x20100804000400,0x7d08000405080220,0x3b),
    (0x280,0x4020100a000a00,0xef08040c4c440082,0x39),
    (0x300,0x402214001400,0x3f50201104048200,0x39),
    (0x380,0x24428002800,0x7e0a018400a20400,0x39),
    (0x400,0x2040850005000,0xcf02024701010100,0x39),
    (0x480,0x4081020002000,0xfb02012088b00882,0x3b),
    (0x4a0,0x8102040004000,0xbb08910100481210,0x3b),
    (0x4c0,0x8040200020400,0xbb2008180c980803,0x3b),
    (0x4e0,0x10080400040800,0xfd11100004040820,0x3b),
    (0x500,0x20100a000a1000,0xd702320090040040,0x39),
    (0x580,0x40221400142200,0xed0400204401a080,0x37),
    (0x780,0x2442800284400,0xdd11010010104002,0x37),
    (0x980,0x4085000500800,0xe713020021004102,0x39),
    (0xa00,0x8102000201000,0x77780a0501410418,0x3b),
    (0xa20,0x10204000402000,0x7722808002640404,0x3b),
    (0xa40,0x4020002040800,0xf314210800041000,0x3b),
    (0xa60,0x8040004081000,0xf582a41000a00280,0x3b),
    (0xa80,0x100a000a102000,0x7e02030400124802,0x39),
    (0xb00,0x22140014224000,0xf904140108240100,0x37),
    (0xd00,0x44280028440200,0xdd08020400021100,0x37),
    (0xf00,0x8500050080400,0xcf10020080127001,0x39),
    (0xf80,0x10200020100800,0x5f040422c0040300,0x3b),
    (0xfa0,0x20400040201000,0xe701110201010040,0x3b),
    (0xfc0,0x2000204081000,0xeb008820084012a0,0x3b),
    (0xfe0,0x4000408102000,0xee0242383c202000,0x3b),
    (0x1000,0xa000a10204000,0xfc00220822001000,0x39),
    (0x1080,0x14001422400000,0xaf00804010400600,0x39),
    (0x1100,0x28002844020000,0xe723200540400401,0x39),
    (0x1180,0x50005008040200,0xdd06061401000808,0x39),
    (0x1200,0x20002010080400,0xb720043280920604,0x3b),
    (0x1220,0x40004020100800,0xaf81040884900200,0x3b),
    (0x1240,0x20408102000,0xd704040405040020,0x3b),
    (0x1260,0x40810204000,0xdd004406081220a0,0x3b),
    (0x1280,0xa1020400000,0xf901802284500520,0x3b),
    (0x12a0,0x142240000000,0xf50924028414180c,0x3b),
    (0x12c0,0x284402000000,0xb700003002020050,0x3b),
    (0x12e0,0x500804020000,0xbe28c28204070084,0x3b),
    (0x1300,0x201008040200,0x7b4128810c208080,0x3b),
    (0x1320,0x402010080400,0xee04080240d20001,0x3b),
    (0x1340,0x2040810204000,0xbd00202a0a202014,0x3a),
    (0x1380,0x4081020400000,0x5f40108c01081240,0x3b),
    (0x13a0,0xa102040000000,0xb740040222013000,0x3b),
    (0x13c0,0x14224000000000,0xf900c84200420200,0x3b),
    (0x13e0,0x28440200000000,0xfc20000151220200,0x3b),
    (0x1400,0x50080402000000,0x7f0080600c016600,0x3b),
    (0x1420,0x20100804020000,0xde40a01429522400,0x3b),
    (0x1440,0x40201008040200,0xee1c102a00510200,0x3a),
];



#[cfg(test)]
mod tests {
    /* use super::*;

    #[test]
    pub fn test_pawns_fend_mask_actv() {
        assert_eq!(pawns_moves_actv(0x8000010010000081), 0x2002800004200);
    }
    
    #[test]
    pub fn test_pawns_fend_mask_idle() {
        assert_eq!(pawns_fend_idle(0xA100000001100080), 0x52000000022800);
    }
    
    #[test]
    pub fn test_knights_fend_mask() {
        assert_eq!(knights_fend(0xA100000001100080), 0xAC522C44446628);
    }
    
    #[test]
    pub fn test_bishops_fend_mask() {
        assert_eq!(bishops_fend(0x2000000000100000, 0x0), 0x518A442A012844);
        assert_eq!(bishops_fend(0x2000000000100000, 0x518A442A012844), 0x50000028002800);
        assert_eq!(bishops_fend(0x2000000000100000, 0x51800028012804), 0x50000028002800);
        assert_eq!(bishops_fend(0x2000000000100000, 0x800400000000), 0x50884428002844);
    }
    
    #[test]
    pub fn test_rooks_fend_mask() {
        assert_eq!(rooks_fend(0x2000000000100000, 0x0), 0xDF30303030EF3030);
        assert_eq!(rooks_fend(0x2000000000100000, 0xDF30303030EF3030), 0x5020000010281000);
        assert_eq!(rooks_fend(0x2000000000100000, 0x5A20500030A83010), 0x5020000010281000);
        assert_eq!(rooks_fend(0x2000000000100000, 0x100101000220000), 0xDF202030302E1010);
    }
    
    #[test]
    pub fn test_queens_fend_mask() {
        assert_eq!(queens_fend(0x2000000000100000, 0x0), 0xDF71BA743AEF3874);
        assert_eq!(queens_fend(0x2000000000100000, 0xDF71BA743AEF3874), 0x5070000038283800);
        assert_eq!(queens_fend(0x2000000000100000, 0x59740A603AA93854), 0x5070000038283800);
        assert_eq!(queens_fend(0x2000000000100000, 0x1200800020223000), 0xD071BA343A2F3804);
    } */
}
